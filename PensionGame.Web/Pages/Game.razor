@page "/game/{sessionId}"
@using PensionGame.Web.Services
@using PensionGame.Web.Components
@using PensionGame.Web.Enums
@using Blazorise

@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject GameDataServices GameService

<h1>Pension game</h1>

<ValidationResult ResultModel="@ValidationResult" />

<EditForm EditContext="@EditContext">
    <DataAnnotationsValidator />
    <Blazorise.ValidationSummary />

    @if (GameData != null && GameHistory != null)
    {
        @if (!GameData.IsInitial)
        {
            <Modal @ref="ModalWindow">
                <ModalContent Centered="true">
                    <ModalHeader>
                        <ModalTitle>Age: @GameData.Year</ModalTitle>
                        <CloseButton />
                    </ModalHeader>
                    <ModalBody>
                        @foreach (var (title, displayMessage, type) in GameData.Events)
                        {
                            <PensionGame.Web.Components.Alert Type="@(type == Api.Domain.Resources.Events.EventType.Info
                                            ? AlertType.Info
                                            : (type == Api.Domain.Resources.Events.EventType.Negative
                                                ? AlertType.Danger
                                                : AlertType.Success))"
                                                              Title="@title"
                                                              DisplayMessage="@displayMessage" />
                        }

                        <PensionGame.Web.Components.Card>
                            <SimpleLineChart Title="Stock Performance"
                                             Label="Stock Price"
                                             XLabel="Age"
                                             YLabel="Stock Price"
                                             DataLabels="@GameHistory.Keys.Select(key => key.ToString()).ToList()"
                                             Data="@GameHistory.Values.Select(gameState => (decimal)gameState.ClientData.ClientHoldings.Stocks.UnitPrice.Price).ToList()" />
                        </PensionGame.Web.Components.Card>

                        <PensionGame.Web.Components.Card>
                            <SimplePieChart Title="Current Portfolio"
                                            DataLabels="@(new [] { "Stocks", "Bonds", "Savings account" })"
                                            Data="@(new decimal[]
                                                    {
                                                        GameData.ClientData.ClientHoldings.Stocks.Value,
                                                        GameData.ClientData.ClientHoldings.Bonds.Value,
                                                        GameData.ClientData.ClientHoldings.SavingsAccount.Amount
                                                    })" />
                        </PensionGame.Web.Components.Card>
                    </ModalBody>
                    <ModalFooter>
                        <Button Color="Color.Primary" Clicked="@HideModal">OK</Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>
        }

        <h4>Age: @GameData.Year</h4>
        <IncomeExpensesCard ClientData="@GameData.ClientData" DisposableIncome="@DisposableIncome"></IncomeExpensesCard>

        @if (!GameData.IsInitial)
        {
            <button class="btn btn-secondary" @onclick="ShowModal">Display info</button>
        }
    }

    <h3>Portfolio</h3>

    <div class="row text-md-end">
        <div class="col-md-6" style="clear: both">
            <StockCard StockData="@ClientHoldings?.Stocks" OnStockSelectionChanged="StockSelectionChanged" />
        </div>
        <div class="col-md-6" style="clear: both">
            <SavingsAccountCard SavingsAccountData="@ClientHoldings?.SavingsAccount" SavingsAccountRate="@(GameData?.MarketData.ReturnData.SavingsAccountRate ?? 0)" OnSavingsAccountSelectionChanged="SavingsAccountSelectionChanged" />
        </div>
    </div>
    <div class="row text-md-end">
        <div class="col-md-6" style="clear: both">
            <BondCard BondData="@ClientHoldings?.Bonds" BondRate="@(GameData?.MarketData.ReturnData.BondRate ?? 0)" OnBondSelectionChanged="BondSelectionChanged" />
        </div>
        <div class="col-md-6" style="clear: both">
            <LoanCard LoanData="@ClientHoldings?.Loans" LoanRate="@(GameData?.MarketData.ReturnData.LoanRate ?? 0)" OnLoanValueChange="LoanSelectionChanged" />
        </div>
    </div>

    @if (GameData != null)
    {
        <div>
            <div class="game-state-info">
                <label>
                    Available to invest:
                </label>
                <h4>
                    @AvailableToInvest
                </h4>
            </div>
        </div>
    }

    <SubmitButton IsDisabled="@(!IsValid)" OnSubmit="@HandleValidSubmit" />
</EditForm>
